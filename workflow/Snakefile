import os
import sys
import pandas as pd
from snakemake.utils import min_version


min_version("8.0")
SMKDIR = os.path.dirname(workflow.snakefile)

config["smkdir"] = SMKDIR


df = pd.read_csv(config.get("tbl"), sep="\t")
df.asm = df.asm.map(os.path.abspath)
df["asm"] = df.asm.str.split(",")
df = df.explode("asm")
df["num"] = df.groupby(level=0).cumcount() + 1
df.set_index(df["sample"] + "_" + df["num"].astype(str), inplace=True)

SAMPLES = list(df["sample"].unique())
print(f"Samples: {SAMPLES}", file=sys.stderr)


wildcard_constraints:
    i=r"\d+",
    sm="|".join(df.index) + "|" + "|".join(df["sample"].str.strip()),


include: "rules/reference_alignment.smk"
include: "rules/gene-conversion.smk"
include: "rules/SafFire.smk"
include: "rules/asm-call.smk"


rule all:
    input:
        ra=rules.reference_alignment.input,
        SafFire=expand(rules.SafFire.output, sm=df.index, ref=config.get("ref").keys()),


rule ideogram:
    input:
        expand(
            rules.bed_to_pdf.output,
            sm=df["sample"].str.strip(),
            ref=config.get("ref").keys(),
        ),


rule dipcall:
    input:
        expand(
            rules.vcf_bed.output,
            sm=df["sample"].str.strip(),
            ref=config.get("ref").keys(),
        ),
        expand(
            rules.dip_phase_index.output,
            sm=df["sample"].str.strip(),
            ref=config.get("ref").keys(),
        ),
        expand(
            rules.merged_vcf.output,
            ref=config.get("ref").keys(),
        ),
        expand(
            rules.add_missing_genotypes.output,
            ref=config.get("ref").keys(),
        ),
        expand(
            rules.callable_regions.output,
            sm=df.index,
            ref=config.get("ref").keys(),
        ),


# run:
#    header = "sample\th1_aln\th1_callable\th2_aln\th2_callable\tsnv\n"
#    for sample in df.index:
#        h1_aln = format(rules.trim_and_break_paf.output.paf, sm="")
#        print()
